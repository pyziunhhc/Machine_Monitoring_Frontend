[{"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\reportWebVitals.js":"1","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Notification\\Notifications.jsx":"2","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Table\\Table.jsx":"3","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\TaskCard\\TaskCard.jsx":"4","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\TasksList\\TasksList.jsx":"5","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\TaskWindow\\TaskWindow.jsx":"6","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\AddTaskWindow\\AddTaskWindow.jsx":"7","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\history.js":"8","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\Routes\\PrivateRoute.jsx":"9","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\Subtasks\\ListSubtasks.jsx":"10","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\Subtasks\\AddSubtask.jsx":"11","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\RightClickMenu\\Menu.jsx":"12","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Users\\Users.jsx":"13","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Container\\Settings.jsx":"14","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Sender\\Sender.jsx":"15","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Users\\Register.jsx":"16","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Machines\\MachineList.jsx":"17","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Machines\\MachineWindowUsersList.jsx":"18","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\helpers\\fetchers.js":"19","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\helpers\\users.js":"20","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\index.jsx":"21","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\helpers\\helpers.js":"22","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\App.jsx":"23","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\assets\\styles\\globalStyle.js":"24","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\LoginScreen\\LoginScreen.jsx":"25","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Main\\Main.jsx":"26","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\providers\\MachinesProvider.js":"27","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\MachineList\\MachineList.jsx":"28","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\MachineCard\\MachineCard.jsx":"29","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\MachineList\\MachineList.styles.js":"30","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\MachineDetailsWindow\\MachineDetailsWindow.jsx":"31","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\MachineDetailsWindow\\PreviousChanges.jsx":"32","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Statistics\\statistics.jsx":"33","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Dashboard\\Dashboard.jsx":"34","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Navigation\\Navigation.jsx":"35","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\atoms\\Button\\Button.jsx":"36","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\atoms\\Belt\\Belt.jsx":"37","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Containers\\AccessDenied.jsx":"38","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Containers\\FloatingContainer.jsx":"39","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Header\\Header.jsx":"40","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\ChartJS\\Chart.jsx":"41","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Dygraph\\Dygraph.jsx":"42","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\atoms\\Status\\Status.jsx":"43","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Operator\\Operator.js":"44","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Analitycs\\Analitycs.js":"45","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\Alert\\Alert.jsx":"46"},{"size":362,"mtime":499162500000,"results":"47","hashOfConfig":"48"},{"size":349,"mtime":1606995283728,"results":"49","hashOfConfig":"48"},{"size":5063,"mtime":1632131715173,"results":"50","hashOfConfig":"48"},{"size":2829,"mtime":1607686786572,"results":"51","hashOfConfig":"48"},{"size":13651,"mtime":1608192493146,"results":"52","hashOfConfig":"48"},{"size":1975,"mtime":1632131723414,"results":"53","hashOfConfig":"48"},{"size":6114,"mtime":1632131723414,"results":"54","hashOfConfig":"48"},{"size":89,"mtime":1607511501070,"results":"55","hashOfConfig":"56"},{"size":431,"mtime":1607517756767,"results":"57","hashOfConfig":"56"},{"size":739,"mtime":1607590166807,"results":"58","hashOfConfig":"48"},{"size":1264,"mtime":1607596019542,"results":"59","hashOfConfig":"48"},{"size":1411,"mtime":1608304102990,"results":"60","hashOfConfig":"56"},{"size":1698,"mtime":1632131715173,"results":"61","hashOfConfig":"48"},{"size":1809,"mtime":1632131743752,"results":"62","hashOfConfig":"48"},{"size":83,"mtime":1627374705728,"results":"63","hashOfConfig":"48"},{"size":3599,"mtime":1632131743752,"results":"64","hashOfConfig":"48"},{"size":5912,"mtime":1632131715173,"results":"65","hashOfConfig":"48"},{"size":2716,"mtime":1632131743760,"results":"66","hashOfConfig":"48"},{"size":3410,"mtime":1631615570135,"results":"67","hashOfConfig":"48"},{"size":466,"mtime":1631529009016,"results":"68","hashOfConfig":"69"},{"size":532,"mtime":1632124288422,"results":"70","hashOfConfig":"48"},{"size":773,"mtime":1631611622971,"results":"71","hashOfConfig":"48"},{"size":1672,"mtime":1632132758581,"results":"72","hashOfConfig":"48"},{"size":7817,"mtime":1632123406160,"results":"73","hashOfConfig":"48"},{"size":3594,"mtime":1632131715173,"results":"74","hashOfConfig":"48"},{"size":2025,"mtime":1632132005784,"results":"75","hashOfConfig":"48"},{"size":5292,"mtime":1632132067819,"results":"76","hashOfConfig":"48"},{"size":4145,"mtime":1632132650029,"results":"77","hashOfConfig":"48"},{"size":2236,"mtime":1632132272945,"results":"78","hashOfConfig":"48"},{"size":719,"mtime":1632129099749,"results":"79","hashOfConfig":"48"},{"size":5185,"mtime":1632132546378,"results":"80","hashOfConfig":"48"},{"size":3616,"mtime":1632131757538,"results":"81","hashOfConfig":"48"},{"size":3675,"mtime":1632131743751,"results":"82","hashOfConfig":"48"},{"size":710,"mtime":1632127763002,"results":"83","hashOfConfig":"48"},{"size":5473,"mtime":1632131912240,"results":"84","hashOfConfig":"48"},{"size":903,"mtime":1631541089116,"results":"85","hashOfConfig":"48"},{"size":1266,"mtime":1631525763355,"results":"86","hashOfConfig":"48"},{"size":99,"mtime":1627984489800,"results":"87","hashOfConfig":"48"},{"size":827,"mtime":1632131743752,"results":"88","hashOfConfig":"48"},{"size":1641,"mtime":1632131750873,"results":"89","hashOfConfig":"48"},{"size":3062,"mtime":1632131757538,"results":"90","hashOfConfig":"48"},{"size":5825,"mtime":1631704557965,"results":"91","hashOfConfig":"48"},{"size":1294,"mtime":1632131882746,"results":"92","hashOfConfig":"48"},{"size":395,"mtime":1632131995257,"results":"93","hashOfConfig":"48"},{"size":409,"mtime":1632131992679,"results":"94","hashOfConfig":"48"},{"size":1529,"mtime":1632132452772,"results":"95","hashOfConfig":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"19p21hf",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"98"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"yd43ev",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q8yr0a",{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"98"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\reportWebVitals.js",[],["202","203"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Notification\\Notifications.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Table\\Table.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\TaskCard\\TaskCard.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\TasksList\\TasksList.jsx",["204"],"import React, { Component, Fragment } from \"react\";\r\nimport TaskCard from \"../TaskCard/TaskCard\";\r\nimport AddTaskWindow from \"../AddTaskWindow/AddTaskWindow\";\r\nimport \"./style.css\";\r\nexport default class TasksList extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todo: [],\r\n      inProgress: [],\r\n      done: [],\r\n      showDetails: false,\r\n      showAddTaskWindow: false,\r\n    };\r\n    this.addTaskWindowRef = React.createRef();\r\n    this.taskCard = React.createRef();\r\n    this.getTasks = this.getTasks.bind(this);\r\n    this.addTaskToList = this.addTaskToList.bind(this);\r\n    this.changeTaskList = this.changeTaskList.bind(this);\r\n    this.showAddTaskWindow = this.showAddTaskWindow.bind(this);\r\n    this.removeAddTaskWindow = this.removeAddTaskWindow.bind(this);\r\n    this.getRef = this.getRef.bind(this)\r\n  }\r\n  getTasks() {\r\n    fetch(\"http://localhost:3001/tasks/all/list\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        Accept: \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((tasks) => {\r\n        if (tasks.status === 200) {\r\n          tasks.assignedTasks.forEach((task) => {\r\n            switch (task.status) {\r\n              case \"todo\":\r\n                this.setState((prevState) => {\r\n                  let array = [...prevState.todo];\r\n                  array.push(\r\n                    <TaskCard\r\n                      ref={this.taskCard}\r\n                      id={task._id}\r\n                      tasks={task.tasks}\r\n                      color={task.color}\r\n                      status={task.status}\r\n                      description={task.description}\r\n                      title={task.title}\r\n                      usersWhoPerforms={task.usersWhoPerforms}\r\n                      userWhoCreated={task.userWhoCreated}\r\n                      showDetails={this.createTaskDetailsWindow}\r\n                    />\r\n                  );\r\n                  return {\r\n                    ...prevState,\r\n                    todo: array,\r\n                  };\r\n                });\r\n                break;\r\n              case \"inProgress\":\r\n                this.setState((prevState) => {\r\n                  let array = [...prevState.inProgress];\r\n                  array.push(\r\n                    <TaskCard\r\n                      ref={this.taskCard}\r\n                      id={task._id}\r\n                      tasks={task.tasks}\r\n                      color={task.color}\r\n                      status={task.status}\r\n                      description={task.description}\r\n                      title={task.title}\r\n                      usersWhoPerforms={task.usersWhoPerforms}\r\n                      userWhoCreated={task.userWhoCreated}\r\n                      showDetails={this.createTaskDetailsWindow}\r\n                    />\r\n                  );\r\n                  return {\r\n                    ...prevState,\r\n                    inProgress: array,\r\n                  };\r\n                });\r\n                break;\r\n              case \"done\":\r\n                this.setState((prevState) => {\r\n                  let array = [...prevState.done];\r\n                  array.push(\r\n                    <TaskCard\r\n                      ref={this.taskCard}\r\n                      id={task._id}\r\n                      tasks={task.tasks}\r\n                      color={task.color}\r\n                      description={task.description}\r\n                      title={task.title}\r\n                      usersWhoPerforms={task.usersWhoPerforms}\r\n                      userWhoCreated={task.userWhoCreated}\r\n                      showDetails={this.createTaskDetailsWindow}\r\n                      status={task.status}\r\n                    />\r\n                  );\r\n                  return {\r\n                    ...prevState,\r\n                    done: array,\r\n                  };\r\n                });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n          tasks.myTasks.forEach((task) => {\r\n            switch (task.status) {\r\n              case \"todo\":\r\n                this.setState((prevState) => {\r\n                  let array = [...prevState.todo];\r\n                  array.push(\r\n                    <TaskCard\r\n                      ref={this.taskCard}\r\n                      tasks={task.tasks}\r\n                      color={task.color}\r\n                      description={task.description}\r\n                      title={task.title}\r\n                      usersWhoPerforms={task.usersWhoPerforms}\r\n                      userWhoCreated={task.userWhoCreated}\r\n                      showDetails={this.createTaskDetailsWindow}\r\n                      status={task.status}\r\n                    />\r\n                  );\r\n                  return {\r\n                    ...prevState,\r\n                    todo: array,\r\n                  };\r\n                });\r\n                break;\r\n              case \"inProgress\":\r\n                this.setState((prevState) => {\r\n                  let array = [...prevState.inProgress];\r\n                  array.push(\r\n                    <TaskCard\r\n                      ref={this.taskCard}\r\n                      tasks={task.tasks}\r\n                      color={task.color}\r\n                      description={task.description}\r\n                      title={task.title}\r\n                      usersWhoPerforms={task.usersWhoPerforms}\r\n                      userWhoCreated={task.userWhoCreated}\r\n                      showDetails={this.createTaskDetailsWindow}\r\n                      status={task.status}\r\n                    />\r\n                  );\r\n                  return {\r\n                    ...prevState,\r\n                    inProgress: array,\r\n                  };\r\n                });\r\n                break;\r\n              case \"done\":\r\n                this.setState((prevState) => {\r\n                  let array = [...prevState.done];\r\n                  array.push(\r\n                    <TaskCard\r\n                      ref={this.taskCard}\r\n                      tasks={task.tasks}\r\n                      color={task.color}\r\n                      description={task.description}\r\n                      title={task.title}\r\n                      usersWhoPerforms={task.usersWhoPerforms}\r\n                      userWhoCreated={task.userWhoCreated}\r\n                      showDetails={this.createTaskDetailsWindow}\r\n                      status={task.status}\r\n                    />\r\n                  );\r\n                  return {\r\n                    ...prevState,\r\n                    done: array,\r\n                  };\r\n                });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n        }\r\n      });\r\n  }\r\n  addTaskToList(task) {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        todo: [\r\n          ...prevState.todo,\r\n          <TaskCard\r\n            tasks={task.tasks}\r\n            color={task.color}\r\n            description={task.description}\r\n            title={task.title}\r\n            usersWhoPerforms={task.usersWhoPerforms}\r\n            userWhoCreated={task.userWhoCreated}\r\n            showDetails={this.createTaskDetailsWindow}\r\n            status={task.status}\r\n          />,\r\n        ],\r\n      };\r\n    });\r\n  }\r\n  changeTaskList(e, to) {\r\n    /**NIE ZMIENIA SIĘ STATUS ZADANIA, WIĘC PRZERZUCENIE 2x ZADANIA NIE DZIAŁA */\r\n    e.preventDefault();\r\n    const id = e.dataTransfer.getData(\"id\"),\r\n      from = e.dataTransfer.getData(\"status\");\r\n\r\n    let movedTask = this.state[from].filter((task) => {\r\n      if (task.props.id === id) {\r\n        return task;\r\n      }\r\n    });\r\n    let array = this.state[from].filter((task) => {\r\n      return task.props.id !== id ? task : null;\r\n    });\r\n\r\n    switch (to) {\r\n      case \"todo\":\r\n        this.taskCard.current.changeThisShit(to);\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            todo: [...prevState.todo, ...movedTask],\r\n          };\r\n        });\r\n        fetch(\"http://localhost:3001/tasks/update/status\", {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            status: to,\r\n            _id: id,\r\n          }),\r\n          credentials: \"include\",\r\n          headers: {\r\n            Accept: \"*\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            console.log(res);\r\n          });\r\n        break;\r\n      case \"inProgress\":\r\n        this.taskCard.current.changeThisShit(to);\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            inProgress: [...prevState.inProgress, ...movedTask],\r\n          };\r\n        });\r\n        fetch(\"http://localhost:3001/tasks/update/status\", {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            status: to,\r\n            _id: id,\r\n          }),\r\n          credentials: \"include\",\r\n          headers: {\r\n            Accept: \"*\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            console.log(res);\r\n          });\r\n        break;\r\n      case \"done\":\r\n        this.taskCard.current.changeThisShit(to);\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            done: [...prevState.done, ...movedTask],\r\n          };\r\n        });\r\n        fetch(\"http://localhost:3001/tasks/update/status\", {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            status: to,\r\n            _id: id,\r\n          }),\r\n          credentials: \"include\",\r\n          headers: {\r\n            Accept: \"*\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            console.log(res);\r\n          });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    switch (from) {\r\n      case \"todo\":\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            todo: array,\r\n          };\r\n        });\r\n\r\n        break;\r\n      case \"inProgress\":\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            inProgress: array,\r\n          };\r\n        });\r\n\r\n        break;\r\n      case \"done\":\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            done: array,\r\n          };\r\n        });\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  showAddTaskWindow() {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showAddTaskWindow: !this.state.showAddTaskWindow,\r\n      };\r\n    });\r\n  }\r\n  removeAddTaskWindow() {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showAddTaskWindow: !this.state.showAddTaskWindow,\r\n      };\r\n    });\r\n  }\r\n  getRef(ref) {\r\n    this.addTaskWindowRef = ref;\r\n  }\r\n  componentDidMount() {\r\n    this.getTasks();\r\n  }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.state.showAddTaskWindow ? (\r\n          <AddTaskWindow\r\n            addTaskToList={this.addTaskToList}\r\n            removeAddTaskWindow={this.removeAddTaskWindow}\r\n            getRef={this.getRef}\r\n          />\r\n        ) : null}\r\n        <div className=\"tasks__wrapper\">\r\n          <div className=\"belt\">\r\n            <div className=\"actions\">\r\n              <button className=\"add\" onClick={this.showAddTaskWindow}>\r\n                +\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"tasks__container\">\r\n            <div className=\"tasks-type__container\">\r\n              <div className=\"counter --todo\">{this.state.todo.length}</div>\r\n              <div\r\n                className=\"tasks\"\r\n                onDrop={(e) => {\r\n                  this.changeTaskList(e, \"todo\");\r\n                }}\r\n                onDragOver={(e) => {\r\n                  e.stopPropagation();\r\n                  e.preventDefault();\r\n                }}>\r\n                {this.state.todo.map((task) => task)}\r\n              </div>\r\n              <div className=\"status --todo\">Do zrobienia</div>\r\n            </div>\r\n            <div className=\"tasks-type__container\">\r\n              <div className=\"counter --in-progress\">\r\n                {this.state.inProgress.length}\r\n              </div>\r\n              <div\r\n                className=\"tasks\"\r\n                onDrop={(e) => {\r\n                  this.changeTaskList(e, \"inProgress\");\r\n                }}\r\n                onDragOver={(e) => {\r\n                  e.stopPropagation();\r\n                  e.preventDefault();\r\n                }}>\r\n                {this.state.inProgress.map((task) => task)}\r\n              </div>\r\n              <div className=\"status --in-progress\">W trakcie realizacji</div>\r\n            </div>\r\n            <div className=\"tasks-type__container\">\r\n              <div className=\"counter --done\">{this.state.done.length}</div>\r\n              <div\r\n                className=\"tasks\"\r\n                onDrop={(e) => {\r\n                  this.changeTaskList(e, \"done\");\r\n                }}\r\n                onDragOver={(e) => {\r\n                  e.stopPropagation();\r\n                  e.preventDefault();\r\n                }}>\r\n                {this.state.done.map((task) => task)}\r\n              </div>\r\n              <div className=\"status --done\">Załatwione</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\TaskWindow\\TaskWindow.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\AddTaskWindow\\AddTaskWindow.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\history.js",[],["205","206"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\Routes\\PrivateRoute.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\Subtasks\\ListSubtasks.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\TaskComponents\\Subtasks\\AddSubtask.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\RightClickMenu\\Menu.jsx",[],["207","208"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Users\\Users.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Container\\Settings.jsx",["209"],"import \"./settings.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Users from \"../Users/Users\";\r\nimport Sender from \"../Sender/Sender\";\r\nimport MachineList from \"../Machines/MachineList\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink,\r\n} from \"react-router-dom\";\r\nimport AccessDenied from \"../../Containers/AccessDenied\";\r\nexport default function Settings({ checkUserIsAuthorized }) {\r\n  const [isEntitled, setIsEntitled] = useState(true);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const userIsEntitled = await checkUserIsAuthorized();\r\n      setIsEntitled(userIsEntitled);\r\n    })();\r\n\r\n    return () => {};\r\n  }, []);\r\n  if (isEntitled) {\r\n    return (\r\n      <div className=\"container settings__container\">\r\n        <header className=\"title__container\">\r\n          <h1>Ustawienia</h1>\r\n        </header>\r\n        <Router>\r\n          <nav className=\"additional-menu__container\">\r\n            <ul>\r\n              <li>\r\n                <NavLink to=\"/settings/users\">Użytkownicy</NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/settings/sender\">Rozsyłacz</NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/settings/machines\">Maszyny</NavLink>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          <Switch>\r\n            <Route path=\"/settings/users\" component={Users}></Route>\r\n            <Route path=\"/settings/sender\" component={Sender}></Route>\r\n            <Route path=\"/settings/machines\">\r\n              <MachineList\r\n                screenType=\"settings\"\r\n                checkUserIsAuthorized={checkUserIsAuthorized}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <AccessDenied />;\r\n  }\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Sender\\Sender.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Users\\Register.jsx",["210"],"import { useState, useEffect } from \"react\";\r\nimport { doFetch } from \"../../../helpers/fetchers\";\r\nimport Button from \"../../Button/Button\";\r\nimport FloatingContainer from \"../../Containers/FloatingContainer\";\r\nimport \"./register.css\";\r\nexport default function Register({ update, removeWindow }) {\r\n  const [login, setLogin] = useState(\"\"),\r\n    [password, setPassword] = useState(\"\"),\r\n    [repassword, setRepassword] = useState(\"\"),\r\n    [name, setName] = useState(\"\"),\r\n    [surname, setSurname] = useState(\"\"),\r\n    [email, setEmail] = useState(\"\"),\r\n    [role, setRole] = useState(\"administrator\");\r\n  const handleOnChange = (e) => {\r\n    const type = e.target.name,\r\n      value = e.target.value;\r\n\r\n    switch (type) {\r\n      case \"login\":\r\n        setLogin(value);\r\n        break;\r\n      case \"password\":\r\n        setPassword(value);\r\n        break;\r\n      case \"repassword\":\r\n        setRepassword(value);\r\n        break;\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"surname\":\r\n        setSurname(value);\r\n        break;\r\n      case \"email\":\r\n        setEmail(value);\r\n        break;\r\n      case \"role\":\r\n        setRole(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const registerUser = async () => {\r\n    const url = \"/users/register\",\r\n      method = \"POST\",\r\n      body = JSON.stringify({\r\n        login,\r\n        password,\r\n        repassword,\r\n        name,\r\n        surname,\r\n        email,\r\n        role,\r\n      }),\r\n      result = await doFetch(url, method, body);\r\n    if (result.success) {\r\n      setLogin(\"\");\r\n      setPassword(\"\");\r\n      setRepassword(\"\");\r\n      setName(\"\");\r\n      setSurname(\"\");\r\n      setEmail(\"\");\r\n      update();\r\n    }\r\n  };\r\n  return (\r\n    <FloatingContainer\r\n      className=\"register__container\"\r\n      beltText=\"Rejestracja\"\r\n      removeWindow={removeWindow}>\r\n      <div className=\"container inputs__container\">\r\n        <label htmlFor=\"login\">\r\n          Login:\r\n          <input type=\"text\" name=\"login\" onChange={handleOnChange} />\r\n        </label>\r\n        <label htmlFor=\"password\">\r\n          Hasło:\r\n          <input type=\"password\" name=\"password\" onChange={handleOnChange} />\r\n        </label>\r\n        <label htmlFor=\"re-password\">\r\n          Powtórz hasło:\r\n          <input type=\"password\" name=\"repassword\" onChange={handleOnChange} />\r\n        </label>\r\n        <label htmlFor=\"name\">\r\n          Imię\r\n          <input type=\"text\" name=\"name\" onChange={handleOnChange} />\r\n        </label>\r\n        <label htmlFor=\"surname\">\r\n          Nazwisko\r\n          <input type=\"text\" name=\"surname\" onChange={handleOnChange} />\r\n        </label>\r\n        <label htmlFor=\"email\">\r\n          Email\r\n          <input type=\"email\" name=\"email\" onChange={handleOnChange} />\r\n        </label>\r\n        <label htmlFor=\"role\">\r\n          Rola\r\n          <select name=\"role\" onChange={handleOnChange}>\r\n            <option value=\"administrator\">Administrator</option>\r\n            <option value=\"analitician\">Analityk</option>\r\n            <option value=\"operator\">Operator</option>\r\n          </select>\r\n        </label>\r\n        <div className=\"container actions__container\">\r\n          <Button\r\n            class=\"button --success\"\r\n            action={registerUser}\r\n            text=\"Zapisz\"\r\n            type=\"register\"\r\n          />\r\n          {/* <Button\r\n            class=\"button --error\"\r\n            type=\"close\"\r\n            action={props.close}\r\n            text=\"Anuluj\"\r\n          /> */}\r\n        </div>\r\n      </div>\r\n    </FloatingContainer>\r\n  );\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Machines\\MachineList.jsx",["211","212"],"import { useState, useEffect } from \"react\";\r\nimport MachineCard from \"components/molecules/Machines/MachineCard/MachineCard\";\r\nimport MachineWindowUsersList from \"./MachineWindowUsersList\";\r\nimport { doFetch } from \"../../../helpers/fetchers\";\r\nimport Button from \"../../Button/Button\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRedo } from \"@fortawesome/free-solid-svg-icons\";\r\nexport default function MachineList(props) {\r\n  const [machines, setMachines] = useState([]);\r\n  const [showWindow, setShowWindow] = useState(false);\r\n  const [displayedMachineName, setDisplayedMachineName] = useState(\"\");\r\n  const [entitledUser, setEntitledUser] = useState(null);\r\n  const getMachines = async () => {\r\n    const url = \"/machines\",\r\n      method = \"GET\",\r\n      result = await doFetch(url, method);\r\n    if (result) {\r\n      setMachines(result.machines);\r\n    }\r\n  };\r\n  const updateMachines = async () => {\r\n    const url = \"/machines\",\r\n      method = \"PUT\",\r\n      result = await doFetch(url, method);\r\n    if (result) {\r\n      console.log(result);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      // const userIsEntitled = await props.checkUserIsAuthorized(\"machines\");\r\n      // setEntitledUser(userIsEntitled);\r\n      getMachines();\r\n    })();\r\n\r\n    return () => {};\r\n  }, []);\r\n  return (\r\n    <div className=\"container machines__wrapper\">\r\n      <div className=\"actions\">\r\n        <Button\r\n          class=\"--success around-animation\"\r\n          type=\"update\"\r\n          text={<FontAwesomeIcon icon={faRedo} size=\"1x\" />}\r\n          action={updateMachines}\r\n        />\r\n      </div>\r\n      <div className=\"machines__container\">\r\n        <div className=\"machine-type__container\">\r\n          <h1>\r\n            Produkcja\r\n            <br />\r\n            Erodowanie\r\n          </h1>\r\n          {machines.map((machine) => {\r\n            if (machine.type === \"Produkcja-Erodowanie\") {\r\n              return (\r\n                <MachineCard\r\n                  machineName={machine.name}\r\n                  screenType=\"statistics\"\r\n                  key={machine.name}\r\n                  showWindow={setShowWindow}\r\n                  setName={setDisplayedMachineName}\r\n                  status={false}\r\n                />\r\n              );\r\n            }\r\n            return true;\r\n          })}\r\n        </div>\r\n        <div className=\"machine-type__container\">\r\n          <h1>\r\n            Ostrzenie\r\n            <br />\r\n            VHM\r\n          </h1>\r\n          {machines.map((machine) => {\r\n            if (machine.type === \"Ostrzenie-VHM\") {\r\n              return (\r\n                <MachineCard\r\n                  machineName={machine.name}\r\n                  screenType=\"statistics\"\r\n                  key={machine.name}\r\n                  showWindow={setShowWindow}\r\n                  setName={setDisplayedMachineName}\r\n                  status={false}\r\n                />\r\n              );\r\n            }\r\n            return true;\r\n          })}\r\n        </div>\r\n        <div className=\"machine-type__container\">\r\n          <h1>\r\n            Ostrzenie\r\n            <br />\r\n            Erodowanie\r\n          </h1>\r\n          {machines.map((machine) => {\r\n            if (machine.type === \"Ostrzenie-Erodowanie\") {\r\n              return (\r\n                <MachineCard\r\n                  machineName={machine.name}\r\n                  screenType=\"statistics\"\r\n                  key={machine.name}\r\n                  showWindow={setShowWindow}\r\n                  setName={setDisplayedMachineName}\r\n                  status={false}\r\n                />\r\n              );\r\n            }\r\n            return true;\r\n          })}\r\n        </div>\r\n        <div className=\"machine-type__container\">\r\n          <h1>\r\n            Ostrzenie <br /> Wiertła VHM\r\n          </h1>\r\n          {machines.map((machine) => {\r\n            if (machine.type === \"Ostrzenie-Wiertła VHM\") {\r\n              return (\r\n                <MachineCard\r\n                  machineName={machine.name}\r\n                  screenType=\"statistics\"\r\n                  key={machine.name}\r\n                  showWindow={setShowWindow}\r\n                  setName={setDisplayedMachineName}\r\n                  status={false}\r\n                />\r\n              );\r\n            }\r\n            return true;\r\n          })}\r\n        </div>\r\n        <div className=\"machine-type__container\">\r\n          <h1>\r\n            Produkcja\r\n            <br />\r\n            VHM\r\n          </h1>\r\n          {machines.map((machine) => {\r\n            if (machine.type === \"Produkcja-VHM\") {\r\n              return (\r\n                <MachineCard\r\n                  machineName={machine.name}\r\n                  screenType=\"statistics\"\r\n                  key={machine.name}\r\n                  showWindow={setShowWindow}\r\n                  setName={setDisplayedMachineName}\r\n                  status={false}\r\n                />\r\n              );\r\n            }\r\n            return true;\r\n          })}\r\n        </div>\r\n        <div className=\"machine-type__container\">\r\n          <h1>\r\n            Produkcja\r\n            <br />\r\n            Korpusy\r\n          </h1>\r\n          {machines.map((machine) => {\r\n            if (machine.type === \"Produkcja-Korpusy\") {\r\n              return (\r\n                <MachineCard\r\n                  machineName={machine.name}\r\n                  screenType=\"statistics\"\r\n                  key={machine.name}\r\n                  showWindow={setShowWindow}\r\n                  setName={setDisplayedMachineName}\r\n                  status={false}\r\n                />\r\n              );\r\n            }\r\n            return true;\r\n          })}\r\n        </div>\r\n      </div>\r\n      {showWindow ? (\r\n        <MachineWindowUsersList\r\n          name={displayedMachineName}\r\n          removeWindow={setShowWindow}\r\n          type={props.type}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\Settings\\Machines\\MachineWindowUsersList.jsx",["213","214"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { doFetch } from \"../../../helpers/fetchers\";\r\nimport Button from \"../../Button/Button\";\r\nimport FloatingContainer from \"../../Containers/FloatingContainer\";\r\nimport \"./machines.css\";\r\n\r\nexport default function MachineWindowUsersList({ name, removeWindow }) {\r\n  const [authorizedUsers, setAuthorizedUsers] = useState([]),\r\n    [availableUsers, setAvailableUsers] = useState([]);\r\n  const getUsers = async () => {\r\n    const url = `/machines/${name}/users`,\r\n      method = \"GET\",\r\n      { success, authorizedUsers, availableUsers } = await doFetch(url, method);\r\n    if (success) {\r\n      setAuthorizedUsers(authorizedUsers);\r\n      setAvailableUsers(availableUsers);\r\n    }\r\n  };\r\n  const addUser = async (login) => {\r\n    const url = `/machines/${name}/users`,\r\n      method = \"PUT\",\r\n      body = JSON.stringify({ login }),\r\n      { success } = await doFetch(url, method, body);\r\n    if (success) {\r\n      getUsers();\r\n    }\r\n  };\r\n  const removeUser = async (login) => {\r\n    const url = `/machines/${name}/users/${login}`,\r\n      method = \"DELETE\",\r\n      { success } = await doFetch(url, method);\r\n    if (success) {\r\n      getUsers();\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getUsers();\r\n    return () => {};\r\n  }, []);\r\n  return (\r\n    <FloatingContainer removeWindow={removeWindow} title=\"Dodaj użytkowników\">\r\n      <div className=\"user-list__container\">\r\n        <header className=\"title\">\r\n          <h1 className=\"black\">Uprawnieni użytkownicy</h1>\r\n        </header>\r\n        <ul>\r\n          {authorizedUsers.map((user) => {\r\n            return (\r\n              <li>\r\n                {user}\r\n                <Button\r\n                  text=\"-\"\r\n                  class=\"button --error\"\r\n                  action={removeUser}\r\n                  data={user}\r\n                  type=\"remove\"\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n      <div className=\"user-list__container\">\r\n        <header className=\"title\">\r\n          <h1 className=\"black\">Dostępni użytkownicy</h1>\r\n        </header>\r\n        <ul>\r\n          {availableUsers.length\r\n            ? availableUsers.map((user) => {\r\n                return (\r\n                  <li>\r\n                    {user}{\" \"}\r\n                    <Button\r\n                      text=\"+\"\r\n                      class=\"button --success\"\r\n                      action={addUser}\r\n                      data={user}\r\n                      type=\"edit\"\r\n                    />\r\n                  </li>\r\n                );\r\n              })\r\n            : \"Brak\"}\r\n        </ul>\r\n      </div>\r\n    </FloatingContainer>\r\n  );\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\helpers\\fetchers.js",["215"]," const api = 'api/v1'\r\n const handleError = async (response) => {\r\n     const result = await response.json(),\r\n         success = result.success,\r\n         message = result.message;\r\n     console.log(success, message)\r\n     return {\r\n         success,\r\n         message\r\n     }\r\n }\r\n const doFetch = async (url, method, body = null) => {\r\n     try {\r\n         const token = document.cookie.split('token=')[1];\r\n         const options = {\r\n             method,\r\n             body,\r\n             credentials: 'include',\r\n             headers: {\r\n                 Accept: \"*\",\r\n                 \"Content-Type\": \"application/json\",\r\n                 \"Authorization\": `Bearer ${token}`\r\n             }\r\n         };\r\n         const response = await fetch(`http://localhost:3001/${api}${url}`, options);\r\n\r\n         if (response.status === 200) {\r\n             return response.json()\r\n         } else if (response.status === 401) {\r\n             return {\r\n                 success: false\r\n             }\r\n         }\r\n\r\n\r\n     } catch (error) {\r\n         console.log(error)\r\n     }\r\n }\r\n\r\n const getAllData = async (name, type, from, to) => {\r\n     try {\r\n         const url = `/data/all/${name}?type=${type}&from=${from.toISOString()}&to=${to.toISOString()}`,\r\n             method = \"GET\";\r\n         //  console.log(url, method)\r\n         const result = await doFetch(url, method);\r\n         //  console.log(result)\r\n         return result;\r\n     } catch (error) {\r\n         console.log(`MachineDetailsWindows error ${error}`);\r\n     }\r\n };\r\n const updateAllData = async (name, from) => {\r\n     try {\r\n         const url = `/data/all`,\r\n             body = JSON.stringify({\r\n                 name,\r\n                 from,\r\n             }),\r\n             method = \"PUT\";\r\n         const result = await doFetch(url, method, body);\r\n         return result\r\n     } catch (error) {\r\n         console.log(`Update all data error ${error}`);\r\n     }\r\n }\r\n const getChartJSData = async (machineName, type, from, to) => {\r\n     try {\r\n         const url = `/data/chartJS/${machineName}?type=${type}&from=${from.toISOString()}&to=${to.toISOString()}`,\r\n             method = \"GET\";\r\n         const result = await doFetch(url, method)\r\n         return result\r\n     } catch (error) {\r\n         console.log(`MachineDetailsWindows error ${error}`);\r\n     }\r\n }\r\n const destroySession = async () => {\r\n     try {\r\n         const url = `/auth/session/destroy`,\r\n             method = \"POST\";\r\n         await doFetch(url, method)\r\n     } catch (error) {\r\n         console.log(`destroy session error ${error}`)\r\n     }\r\n }\r\n const getStatus = async (name) => {\r\n     try {\r\n         const url = `/data/status/${name}`,\r\n             method = \"GET\",\r\n             result = await doFetch(url, method);\r\n         return result\r\n     } catch (error) {\r\n         console.log(`Get status error ${error}`)\r\n     }\r\n };\r\n const updateStatus = async (name) => {\r\n     try {\r\n\r\n         const url = `/data/status`,\r\n             method = \"PUT\",\r\n             body = JSON.stringify({\r\n                 name\r\n             }),\r\n             result = await doFetch(url, method, body);\r\n         return result\r\n\r\n     } catch (error) {\r\n         console.log(`Update status error ${error}`)\r\n     }\r\n };\r\n export {\r\n     getAllData,\r\n     updateAllData,\r\n     getChartJSData,\r\n     getStatus,\r\n     updateStatus,\r\n     destroySession,\r\n     doFetch\r\n }","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\helpers\\users.js",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\index.jsx",["216"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"views/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CookiesProvider } from \"react-cookie\";\nReactDOM.render(\n  // <CookiesProvider>\n  <App />,\n  // </CookiesProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\helpers\\helpers.js",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\App.jsx",["217"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\assets\\styles\\globalStyle.js",[],["218","219"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\LoginScreen\\LoginScreen.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Main\\Main.jsx",["220","221"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\providers\\MachinesProvider.js",["222","223","224"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\MachineList\\MachineList.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\MachineCard\\MachineCard.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\MachineList\\MachineList.styles.js",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\MachineDetailsWindow\\MachineDetailsWindow.jsx",["225"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\MachineDetailsWindow\\PreviousChanges.jsx",["226","227","228"],"import { useState, useEffect } from \"react\";\r\nimport Chart from \"components/molecules/ChartJS/Chart\";\r\nimport { getChartJSData } from \"helpers/fetchers\";\r\nimport \"./previousChange.css\";\r\n\r\nexport default function PreviousChangesCharts({ machineName }) {\r\n  const [firstChangeData, setFirstChangeData] = useState(null),\r\n    [secondChangeData, setSecondChangeData] = useState(null),\r\n    [thirdChangeData, setThirdChangeData] = useState(null);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const timeBase = new Date(new Date() - 86400000),\r\n        day = timeBase.getDate(),\r\n        month = timeBase.getMonth(),\r\n        year = timeBase.getFullYear();\r\n\r\n      const from = new Date(year, month, day, 7, 0, 0),\r\n        tempTo = new Date(year, month, day, 7, 0, 0),\r\n        to = new Date(tempTo.setHours(tempTo.getHours() + 8));\r\n      const { success, chartJS } = await getChartJSData(\r\n        machineName,\r\n        \"previous-first\",\r\n        from,\r\n        to\r\n      );\r\n      if (success) {\r\n        setFirstChangeData(chartJS);\r\n      }\r\n    })();\r\n    return () => {};\r\n  }, []);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const timeBase = new Date(new Date() - 86400000),\r\n        day = timeBase.getDate(),\r\n        month = timeBase.getMonth(),\r\n        year = timeBase.getFullYear();\r\n      const from = new Date(year, month, day, 15, 0, 0),\r\n        tempTo = new Date(year, month, day, 15, 0, 0),\r\n        to = new Date(tempTo.setHours(tempTo.getHours() + 8));\r\n      const { success, chartJS } = await getChartJSData(\r\n        machineName,\r\n        \"previous-second\",\r\n        from,\r\n        to\r\n      );\r\n      if (success) {\r\n        setSecondChangeData(chartJS);\r\n      }\r\n    })();\r\n    return () => {};\r\n  }, []);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const timeBase = new Date(new Date() - 86400000),\r\n        day = timeBase.getDate(),\r\n        month = timeBase.getMonth(),\r\n        year = timeBase.getFullYear();\r\n\r\n      const from = new Date(year, month, day, 23, 0, 0),\r\n        tempTo = new Date(year, month, day, 23, 0, 0),\r\n        to = new Date(tempTo.setHours(tempTo.getHours() + 8));\r\n\r\n      const { success, chartJS } = await getChartJSData(\r\n        machineName,\r\n        \"previous-third\",\r\n        from,\r\n        to\r\n      );\r\n      if (success) {\r\n        setThirdChangeData(chartJS);\r\n      }\r\n    })();\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container previous-change__container\">\r\n      <div className=\"container chartJS__container\">\r\n        <header className=\"title\">\r\n          <h1>PIERWSZA ZMIANA</h1>\r\n        </header>\r\n        {firstChangeData ? (\r\n          <Chart\r\n            type=\"time\"\r\n            isPreviousChange={true}\r\n            machineName={machineName}\r\n            data={firstChangeData}\r\n          />\r\n        ) : null}\r\n      </div>\r\n\r\n      <div className=\"container chartJS__container\">\r\n        <header className=\"title\">\r\n          <h1>DRUGA ZMIANA</h1>\r\n        </header>\r\n        {secondChangeData ? (\r\n          <Chart\r\n            type=\"time\"\r\n            isPreviousChange={true}\r\n            machineName={machineName}\r\n            data={secondChangeData}\r\n          />\r\n        ) : null}\r\n      </div>\r\n      <div className=\"container chartJS__container\">\r\n        <header className=\"title\">\r\n          <h1>TRZECIA ZMIANA</h1>\r\n        </header>\r\n        {thirdChangeData ? (\r\n          <Chart\r\n            type=\"time\"\r\n            isPreviousChange={true}\r\n            machineName={machineName}\r\n            data={thirdChangeData}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Statistics\\statistics.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Dashboard\\Dashboard.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Navigation\\Navigation.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\atoms\\Button\\Button.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\atoms\\Belt\\Belt.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Containers\\AccessDenied.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Containers\\FloatingContainer.jsx",[],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\organism\\Header\\Header.jsx",["229"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\ChartJS\\Chart.jsx",["230"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport { parseMillisecondsIntoReadableTime } from \"../../../helpers/helpers\";\r\nexport default function Chart({ data, type, isPreviousChange }) {\r\n  let chartRef = useRef(null);\r\n  const clientWidth = document.body.clientWidth;\r\n  const [chartData, setChartData] = useState({\r\n    labels: data.labels,\r\n    datasets: [\r\n      {\r\n        label: type,\r\n        data:\r\n          type === \"time\"\r\n            ? data.time.map((test) => new Date(test))\r\n            : data.percentage,\r\n        backgroundColor: data.colors,\r\n      },\r\n    ],\r\n  });\r\n  const [options] = useState({\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          ticks: {\r\n            display: false,\r\n            min: 0.1,\r\n            stacked: true,\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            display: false,\r\n            min: 0.1,\r\n            stacked: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    showAllTooltips: true,\r\n    tooltips: {\r\n      custom: function (tooltip) {\r\n        try {\r\n          let value = tooltip.body[0].lines[0].split(\": \")[1];\r\n          tooltip.body[0].lines[0] =\r\n            type === \"percentage\"\r\n              ? `${value}%`\r\n              : parseMillisecondsIntoReadableTime(value);\r\n          tooltip.bodyFontSize = 20;\r\n          if (!tooltip) return;\r\n          tooltip.displayColors = false;\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      },\r\n    },\r\n    layout: {\r\n      padding: {\r\n        top: 20,\r\n        bottom: 20,\r\n      },\r\n    },\r\n    responsive: false,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      datalabels: {\r\n        align: \"end\",\r\n        clamp: true,\r\n        overlap: \"auto\",\r\n        clip: true,\r\n        visibility: \"auto\",\r\n        display: true,\r\n        backgroundColor: function (context) {\r\n          return context.dataset.backgroundColor;\r\n        },\r\n        formatter: function (value, context) {\r\n          return type === \"percentage\"\r\n            ? `${value}%`\r\n            : parseMillisecondsIntoReadableTime(value);\r\n        },\r\n        borderRadius: 4,\r\n        font: {\r\n          size: 15,\r\n          weight: \"bold\",\r\n        },\r\n        color: \"black\",\r\n        textShadowColor: \"black\",\r\n        //rotation: rotation\r\n      },\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n    animation: false,\r\n  });\r\n  useEffect(() => {\r\n    setChartData({\r\n      labels: data.labels,\r\n      datasets: [\r\n        {\r\n          label: type,\r\n          data:\r\n            type === \"time\"\r\n              ? data.time.map((time) => new Date(time))\r\n              : data.percentage,\r\n          backgroundColor: data.colors,\r\n        },\r\n      ],\r\n    });\r\n    return () => {};\r\n  }, [data]);\r\n  return (\r\n    <Bar\r\n      data={chartData}\r\n      options={options}\r\n      width={clientWidth > 1000 ? 500 : clientWidth - 100}\r\n      height={isPreviousChange ? 400 : 500}\r\n      ref={chartRef}\r\n    />\r\n  );\r\n}\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Dygraph\\Dygraph.jsx",["231","232"],"import { useState, useEffect } from \"react\";\r\nimport Dygraph from \"dygraphs\";\r\n\r\nexport default function Dygraphs({ data }) {\r\n  const tempColors = {\r\n    erodowanie: {\r\n      name: \"erodowanie\",\r\n      displayName: \"Erodowanie\",\r\n      className: \"eroding\",\r\n      color: \"#005214\",\r\n    },\r\n    szlifowanie: {\r\n      name: \"szlifowanie\",\r\n      displayName: \"Szlifowanie\",\r\n      color: \"rgba(0, 209, 44, 0.9)\",\r\n      className: \"grinding\",\r\n    },\r\n    praca: {\r\n      name: \"praca\",\r\n      displayName: \"Praca\",\r\n      className: \"working\",\r\n      color: \"rgba(0, 82, 20, 0.9)\",\r\n    },\r\n    disconnect: {\r\n      name: \"disconnect\",\r\n      displayName: \"Wyłączona\",\r\n      className: \"disconnect\",\r\n      color: \"rgba(145, 145, 145, 1)\",\r\n    },\r\n    manual: {\r\n      name: \"manual\",\r\n      displayName: \"Załadunek\\nRobotem\",\r\n      className: \"robotLoading\",\r\n      color: \"rgba(200,0,200,1)\",\r\n    },\r\n    warmup: {\r\n      name: \"warmup\",\r\n      displayName: \"Załadunek Ręczny\",\r\n      className: \"manualLoading\",\r\n      color: \"rgba(81, 182, 215,1)\",\r\n    },\r\n    stop: {\r\n      name: \"stop\",\r\n      displayName: \"Stop\",\r\n      className: \"stop\",\r\n      color: \"rgba(243, 230, 0, 1)\",\r\n    },\r\n    suspend: {\r\n      name: \"suspend\",\r\n      displayName: \"Pomiar\",\r\n      className: \"measuring\",\r\n      color: \"rgba(255, 177, 51, 1)\",\r\n    },\r\n    alarm: {\r\n      name: \"alarm\",\r\n      displayName: \"Alarm\",\r\n      className: \"alarm\",\r\n      color: \"rgba(255,0,0,1)\",\r\n    },\r\n    rozgrzewka: {\r\n      name: \"rozgrzewka\",\r\n      displayName: \"Rozgrzewka\",\r\n      className: \"warmup\",\r\n      color: \"rgba(168,80,80,1)\",\r\n    },\r\n    wymiana_sciernicy: {\r\n      name: \"wymiana_sciernicy\",\r\n      displayName: \"Wymiana\\nŚciernicy\",\r\n      className: \"wheelReplacement\",\r\n      color: \"rgba(0,0,0,1)\",\r\n    },\r\n    wymianaNarzedzia: {\r\n      name: \"wymianaNarzedzia\",\r\n      displayName: \"Wymiana\\nNarzędzia\",\r\n      className: \"toolChange\",\r\n      color: \"rgba(206, 183, 119, 1)\",\r\n    },\r\n    przejscie: {\r\n      name: \"przejscie\",\r\n      displayName: \"Przejście\",\r\n      className: \"transition\",\r\n      color: \"rgba(255,112,183,1)\",\r\n    },\r\n    zatrzymanie: {\r\n      name: \"zatrzymanie\",\r\n      displayName: \"Zatrzymanie\",\r\n      className: \"suspend\",\r\n      color: \"rgba(145,19,19,1)\",\r\n    },\r\n  };\r\n  const [chartObject, setChartObject] = useState(null),\r\n    [chartData] = useState(\r\n      data.map((test) => {\r\n        return test.map((test2, index) => {\r\n          if (index === 0) {\r\n            return new Date(test2);\r\n          } else {\r\n            return test2;\r\n          }\r\n        });\r\n      })\r\n    ),\r\n    [labels] = useState([\r\n      \"start\",\r\n      \"Posuw\",\r\n      \"Erodowanie\",\r\n      \"Szlifowanie\",\r\n      \"Wyłączona\",\r\n      \"Zał.Ręczny\",\r\n      \"Zał.Robotem\",\r\n      \"Stop\",\r\n      \"Pomiar\",\r\n      \"Alarm\",\r\n      \"Wymiana Ściernicy\",\r\n      \"Wymiana Narzędzia\",\r\n      \"Przejście\",\r\n      \"Rozgrzewka\",\r\n      \"Zatrzymanie\",\r\n      \"Praca\",\r\n    ]),\r\n    [colors] = useState([\r\n      tempColors.erodowanie.color,\r\n      tempColors.erodowanie.color,\r\n      tempColors.szlifowanie.color,\r\n      tempColors.disconnect.color,\r\n      tempColors.warmup.color,\r\n      tempColors.manual.color,\r\n      tempColors.stop.color,\r\n      tempColors.suspend.color,\r\n      tempColors.alarm.color,\r\n      tempColors.wymiana_sciernicy.color,\r\n      tempColors.wymianaNarzedzia.color,\r\n      tempColors.przejscie.color,\r\n      tempColors.rozgrzewka.color,\r\n      tempColors.zatrzymanie.color,\r\n      tempColors.praca.color,\r\n    ]);\r\n  const create = (data, labels, colors) => {\r\n    const clientWidth = document.body.clientWidth;\r\n    return new Dygraph(\"dygraph\", data, {\r\n      labels,\r\n      colors,\r\n      visibility: [\r\n        false,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n        true,\r\n      ],\r\n      labelsDiv: \"dygraph-legend\",\r\n      stepPlot: true,\r\n      fillGraph: true,\r\n      fillAlpha: 1,\r\n      height: 150,\r\n      width: clientWidth > 1000 ? 1024 : clientWidth - 100,\r\n      valueRange: [0, 1],\r\n      displayAnnotations: true,\r\n      axes: {\r\n        y: {\r\n          drawAxis: false,\r\n        },\r\n      },\r\n      valueFormatter(value, opts, seriesName) {\r\n        if (seriesName !== \"start\") {\r\n          return `Czas: ${parseMillisecondsIntoReadableTime(value)}`;\r\n        } else {\r\n          return `Start: ${new Date(value).toLocaleDateString()} ${new Date(\r\n            value\r\n          ).toLocaleTimeString()}`;\r\n        }\r\n      },\r\n      zoomCallback(minDate, maxDate, yRanges) {\r\n        this.updateOptions({\r\n          valueRange: [0, 1],\r\n        });\r\n      },\r\n      annotationClickHandler(event, x, points) {\r\n        console.log(...arguments);\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let object = create(chartData, labels, colors);\r\n    setChartObject(object);\r\n    return () => {\r\n      setChartObject(null);\r\n    };\r\n  }, []);\r\n  return <div id=\"dygraph\"></div>;\r\n}\r\n\r\nconst parseMillisecondsIntoReadableTime = (milliseconds) => {\r\n  //Get hours from milliseconds\r\n\r\n  let hours = milliseconds / 1000 / 60 / 60,\r\n    absoluteHours = Math.floor(hours),\r\n    h = absoluteHours > 9 ? absoluteHours : \"0\" + absoluteHours,\r\n    //Get remainder from hours and convert to minutes\r\n    minutes = (hours - absoluteHours) * 60,\r\n    absoluteMinutes = Math.floor(minutes),\r\n    m = absoluteMinutes > 9 ? absoluteMinutes : \"0\" + absoluteMinutes,\r\n    //Get remainder from minutes and convert to seconds\r\n    seconds = (minutes - absoluteMinutes) * 60,\r\n    absoluteSeconds = Math.floor(seconds),\r\n    s = absoluteSeconds > 9 ? absoluteSeconds : \"0\" + absoluteSeconds;\r\n\r\n  return `${h}:${m}:${s}`;\r\n};\r\n","C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\atoms\\Status\\Status.jsx",["233"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Operator\\Operator.js",["234"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\views\\Analitycs\\Analitycs.js",["235","236"],"C:\\Users\\mpy\\Desktop\\Programowanie\\monitoring_maszyn_node\\frontend\\src\\components\\molecules\\Machines\\Alert\\Alert.jsx",["237"],{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":212,"column":52,"nodeType":"244","messageId":"245","endLine":212,"endColumn":54},{"ruleId":"238","replacedBy":"246"},{"ruleId":"240","replacedBy":"247"},{"ruleId":"238","replacedBy":"248"},{"ruleId":"240","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":22,"column":6,"nodeType":"252","endLine":22,"endColumn":8,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":1,"column":20,"nodeType":"256","messageId":"257","endLine":1,"endColumn":29},{"ruleId":"254","severity":1,"message":"258","line":12,"column":10,"nodeType":"256","messageId":"257","endLine":12,"endColumn":22},{"ruleId":"254","severity":1,"message":"259","line":12,"column":24,"nodeType":"256","messageId":"257","endLine":12,"endColumn":39},{"ruleId":"254","severity":1,"message":"260","line":1,"column":31,"nodeType":"256","messageId":"257","endLine":1,"endColumn":37},{"ruleId":"250","severity":1,"message":"261","line":39,"column":6,"nodeType":"252","endLine":39,"endColumn":8,"suggestions":"262"},{"ruleId":"254","severity":1,"message":"263","line":2,"column":8,"nodeType":"256","messageId":"257","endLine":2,"endColumn":19},{"ruleId":"254","severity":1,"message":"264","line":5,"column":10,"nodeType":"256","messageId":"257","endLine":5,"endColumn":25},{"ruleId":"250","severity":1,"message":"265","line":50,"column":6,"nodeType":"252","endLine":50,"endColumn":8,"suggestions":"266"},{"ruleId":"238","replacedBy":"267"},{"ruleId":"240","replacedBy":"268"},{"ruleId":"254","severity":1,"message":"269","line":6,"column":3,"nodeType":"256","messageId":"257","endLine":6,"endColumn":14},{"ruleId":"254","severity":1,"message":"270","line":16,"column":10,"nodeType":"256","messageId":"257","endLine":16,"endColumn":24},{"ruleId":"254","severity":1,"message":"271","line":2,"column":8,"nodeType":"256","messageId":"257","endLine":2,"endColumn":17},{"ruleId":"254","severity":1,"message":"258","line":27,"column":10,"nodeType":"256","messageId":"257","endLine":27,"endColumn":22},{"ruleId":"254","severity":1,"message":"259","line":27,"column":24,"nodeType":"256","messageId":"257","endLine":27,"endColumn":39},{"ruleId":"250","severity":1,"message":"272","line":85,"column":6,"nodeType":"252","endLine":85,"endColumn":8,"suggestions":"273"},{"ruleId":"250","severity":1,"message":"274","line":31,"column":6,"nodeType":"252","endLine":31,"endColumn":8,"suggestions":"275"},{"ruleId":"250","severity":1,"message":"274","line":52,"column":6,"nodeType":"252","endLine":52,"endColumn":8,"suggestions":"276"},{"ruleId":"250","severity":1,"message":"274","line":76,"column":6,"nodeType":"252","endLine":76,"endColumn":8,"suggestions":"277"},{"ruleId":"254","severity":1,"message":"278","line":4,"column":10,"nodeType":"256","messageId":"257","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"279","line":113,"column":6,"nodeType":"252","endLine":113,"endColumn":12,"suggestions":"280"},{"ruleId":"254","severity":1,"message":"281","line":91,"column":10,"nodeType":"256","messageId":"257","endLine":91,"endColumn":21},{"ruleId":"250","severity":1,"message":"282","line":199,"column":6,"nodeType":"252","endLine":199,"endColumn":8,"suggestions":"283"},{"ruleId":"250","severity":1,"message":"274","line":29,"column":6,"nodeType":"252","endLine":29,"endColumn":8,"suggestions":"284"},{"ruleId":"254","severity":1,"message":"271","line":2,"column":8,"nodeType":"256","messageId":"257","endLine":2,"endColumn":17},{"ruleId":"254","severity":1,"message":"285","line":1,"column":10,"nodeType":"256","messageId":"257","endLine":1,"endColumn":20},{"ruleId":"254","severity":1,"message":"271","line":2,"column":8,"nodeType":"256","messageId":"257","endLine":2,"endColumn":17},{"ruleId":"250","severity":1,"message":"286","line":33,"column":6,"nodeType":"252","endLine":33,"endColumn":8,"suggestions":"287"},"no-native-reassign",["288"],"no-negated-in-lhs",["289"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["288"],["289"],["288"],["289"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUserIsAuthorized'. Either include it or remove the dependency array. If 'checkUserIsAuthorized' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["290"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'entitledUser' is assigned a value but never used.","'setEntitledUser' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["291"],"'handleError' is assigned a value but never used.","'CookiesProvider' is defined but never used.","React Hook useEffect has missing dependencies: 'cookies', 'removeCookie', 'signIn', and 'signOut'. Either include them or remove the dependency array.",["292"],["288"],["289"],"'useLocation' is defined but never used.","'destroySession' is defined but never used.","'PropTypes' is defined but never used.","React Hook useEffect has missing dependencies: 'checkStatsIsExist', 'lockMachine', 'lockStatistics', 'machineName', 'saveStats', 'screenType', 'unlockMachine', 'unlockStatistics', and 'updateStats'. Either include them or remove the dependency array.",["293"],"React Hook useEffect has a missing dependency: 'machineName'. Either include it or remove the dependency array.",["294"],["295"],["296"],"'faBell' is defined but never used.","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array. If 'setChartData' needs the current value of 'type', you can also switch to useReducer instead of useState and read 'type' in the reducer.",["297"],"'chartObject' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chartData', 'colors', and 'labels'. Either include them or remove the dependency array.",["298"],["299"],"'useContext' is defined but never used.","React Hook useEffect has missing dependencies: 'checkStatsIsExist' and 'machineName'. Either include them or remove the dependency array. If 'setMessage' needs the current value of 'machineName', you can also switch to useReducer instead of useState and read 'machineName' in the reducer.",["300"],"no-global-assign","no-unsafe-negation",{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"309","fix":"311"},{"desc":"309","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"309","fix":"317"},{"desc":"318","fix":"319"},"Update the dependencies array to be: [checkUserIsAuthorized]",{"range":"320","text":"321"},"Update the dependencies array to be: [getUsers]",{"range":"322","text":"323"},"Update the dependencies array to be: [cookies, removeCookie, signIn, signOut]",{"range":"324","text":"325"},"Update the dependencies array to be: [checkStatsIsExist, lockMachine, lockStatistics, machineName, saveStats, screenType, unlockMachine, unlockStatistics, updateStats]",{"range":"326","text":"327"},"Update the dependencies array to be: [machineName]",{"range":"328","text":"329"},{"range":"330","text":"329"},{"range":"331","text":"329"},"Update the dependencies array to be: [data, type]",{"range":"332","text":"333"},"Update the dependencies array to be: [chartData, colors, labels]",{"range":"334","text":"335"},{"range":"336","text":"329"},"Update the dependencies array to be: [checkStatsIsExist, machineName]",{"range":"337","text":"338"},[657,659],"[checkUserIsAuthorized]",[1283,1285],"[getUsers]",[1599,1601],"[cookies, removeCookie, signIn, signOut]",[2603,2605],"[checkStatsIsExist, lockMachine, lockStatistics, machineName, saveStats, screenType, unlockMachine, unlockStatistics, updateStats]",[1074,1076],"[machineName]",[1722,1724],[2374,2376],[2837,2843],"[data, type]",[5040,5042],"[chartData, colors, labels]",[892,894],[969,971],"[checkStatsIsExist, machineName]"]